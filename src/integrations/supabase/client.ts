// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://jlkclltgwquauwkwfthn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impsa2NsbHRnd3F1YXV3a3dmdGhuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY0OTYzNjgsImV4cCI6MjA3MjA3MjM2OH0.gikk5e-yrMH0Yyh4ybXPPmmlb_elY3lrQ656bsMByJs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  }
});

// Handle authentication errors by clearing invalid tokens
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'TOKEN_REFRESHED' && !session) {
    // If token refresh failed, clear the stored session
    localStorage.removeItem('sb-jlkclltgwquauwkwfthn-auth-token');
  }
});

// Clear any existing invalid tokens on initialization
const clearInvalidTokens = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error && error.message.includes('refresh_token_not_found')) {
      localStorage.removeItem('sb-jlkclltgwquauwkwfthn-auth-token');
      await supabase.auth.signOut();
    }
  } catch (error) {
    // If there's any error getting the session, clear the stored tokens
    localStorage.removeItem('sb-jlkclltgwquauwkwfthn-auth-token');
  }
};

// Run the cleanup on client initialization
clearInvalidTokens();